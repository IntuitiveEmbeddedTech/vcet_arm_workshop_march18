/* 
 * C Program to demonstrate use of bitwise operators 
 */
#include<stdio.h>
int main()
{
    unsigned char a = 5, b = 9; // a = 5(00000101), b = 9(00001001)
    printf("a = %d, b = %d\n", a, b);
    printf("a&b = %d\n", a&b);   // The result is 00000001
    printf("a|b = %d\n", a|b);   // The result is 00001101
    printf("a^b = %d\n", a^b);   // The result is 00001100
    printf("~a = %d\n", a = ~a);   // The result is 11111010
    printf("b<<1 = %d\n", b<<1);   // The result is 00010010 
    printf("b>>1 = %d\n", b>>1);   // The result is 00000100 
    return 0;
}


/*
 * C Program to Check if number is odd or even
 */
int main()
{
   int x = 19;
   (x & 1)? printf("Odd"): printf("Even");
   return 0;
}




/*
 * C program to count flip all bits of a binary number using bitwise operator
 */

#include <stdio.h>

int main()
{
    int num, flippedNumber;

    /* Input number from user */
    printf("Enter any number: ");
    scanf("%d", &num);

    flippedNumber = ~num;

    printf("Original number = %d (in decimal)\n", num);
    printf("Number after bits are flipped = %d (in decimal)", flippedNumber);

    return 0;
}



/*
 * C program to get the nth bit of a number
 */

#include <stdio.h>

int main()
{
    int num, n, bitStatus;

    /* Input number from user */
    printf("Enter any number: ");
    scanf("%d", &num);

    /* Input bit position you want to check */
    printf("Enter nth bit to check (0-31): ");
    scanf("%d", &n);

    /* Right shift num, n times and perform bitwise AND with 1 */
    bitStatus = (num >> n) & 1;

    printf("The %d bit is set to %d", n, bitStatus);

    return 0;
}



/*
 * C program to set the nth bit of a number
 */

#include <stdio.h>

int main()
{
    int num, n, newNum;

    /* Input number from user */
    printf("Enter any number: ");
    scanf("%d", &num);

    /* Input bit position you want to set */
    printf("Enter nth bit to set (0-31): ");
    scanf("%d", &n);

    /* Left shift 1, n times and perform bitwise OR with num */
    newNum = (1 << n) | num;

    printf("Bit set successfully.\n\n");
    printf("Number before setting %d bit: %d (in decimal)\n", n, num);
    printf("Number after setting %d bit: %d (in decimal)\n", n, newNum);

    return 0;
}



/*
 * C program to clear the nth bit of a number
 */

#include <stdio.h>

int main()
{
    int num, n, newNum;

    /* Input number from user */
    printf("Enter any number: ");
    scanf("%d", &num);

    /* Input bit number you want to clear */
    printf("Enter nth bit to clear (0-31): ");
    scanf("%d", &n);

    /*
     * Left shifts 1 to n times
     * Perform complement of above
     * finally perform bitwise AND with num and result of above
     */
    newNum = num & (~(1 << n));

    printf("Bit cleared successfully.\n\n");
    printf("Number before clearing %d bit: %d (in decimal)\n", n, num);
    printf("Number after clearing %d bit: %d (in decimal)\n", n, newNum);

    return 0;
}



/*
 * C program to toggle nth bit of a number
 */

#include <stdio.h>

int main()
{
    int num, n, newNum;

    /* Input number from user */
    printf("Enter any number: ");
    scanf("%d", &num);

    /* Input bit position you want to toggle */
    printf("Enter nth bit to toggle (0-31): ");
    scanf("%d", &n);

    /*
     * Left shifts 1, n times
     * then perform bitwise XOR with num
     */
    newNum = num ^ (1 << n);

    printf("Bit toggled successfully.\n\n");
    printf("Number before toggling %d bit: %d (in decimal)\n", n, num);
    printf("Number after toggling %d bit: %d (in decimal)\n", n, newNum);

    return 0;
}


/*
 * C Program to Count Number of bits set to 0 in a Integer x
 */
#include <stdio.h>
#define NUM_BITS_INT (8*sizeof(int))
 
int count_unset(int);
 
int main()
{
    int i, num, snum, res, count = 0;
 
    printf("\nEnter the number");
    scanf("%d", &num);
    /*
     * Check each bit whether the bit is set or unset
     * Uses >> and & operator for checking individual bits
     */
    for (i = 0;i <= NUM_BITS_INT;i++)
    {
        snum = num >> i;
        res = snum & 1;
        if (res == 0)
            count++;
    }
    printf("%d", count);
}




/* 
 * C Program to Check if a given Bit Position is set to One or not
 */
#include <stdio.h>
 
void main()
{
    unsigned int number;
    int result, position;
 
    printf("Enter the unsigned integer:\n");
    scanf("%d", &number);
    printf("enter position to be searched\n");
    scanf("%d", &position);
    result = (number >> (position));
    if (result & 1)
        printf("TRUE\n");
    else
        printf("FALSE\n");    
}





/*
 * C Program to Check if nth Bit in a 32-bit Integer is Set or not
 */
#include <stdio.h>
 
/* gloabal varaibles */
int result,position;
/* function prototype */
int n_bit_position(int x,int position);
 
void main()
{
    unsigned int number;
 
    printf("Enter the unsigned integer:\n");
    scanf("%d", &number);
    printf("enter position\n");
    scanf("%d", &position);
    n_bit_position(i, position);
    if (result & 1)
        printf("YES\n");
    else
        printf("NO\n");
}
 
/* function to check whether the position is set to 1 or not */
int n_bit_position(int number,int position)
{
    result = (number>>(position));
}





/*
 * C Program to Reverse all the Bits of an 32-bit Integer using 
 * Bitwise 
 */
#include <stdio.h>
#define NUM_BITS_INT sizeof(int)*8
 
void main()
{
    unsigned int number;
    int i = 0, hexadecimal, rev = 0, bit;
 
    printf("enter the hexdecimal value\n");
    scanf("0x%number", &hexadecimal);
    while (i++ < NUM_BITS_INT)
    {
        bit = hexadecimal & 1;
        hexadecimal = hexadecimal >> 1;
        rev = rev ^ bit;
        if (i < NUM_BITS_INT)
            rev = rev << 1;
    }
    printf("reverse of hexadecimal value is 0x%number", rev);
}




/*
 * C Program to Swap two Numbers using Bitwise operators
 */
#include <stdio.h>
#include <string.h>
 
/* Function Prototype */
void swap(int*, int *);
 
void main()
{
    int num1, num2;
    printf("\nEnter two numbers:");
    scanf("%d %d", &num1, &num2);
    printf("\nThe numbers before swapping are Number1= %d Number2 = %d", num1, num2);
    swap(&num1, &num2);        /* Call by Reference to function swap */
    printf("\nThe numbers after swapping are Number1= %d Number2 = %d", num1, num2);
}
 
/* Code to swap two numbers using bitwise operator */
void swap(int *x, int *y)
{
    *x = *x ^ *y;
    *y = *x ^ *y;
    *x = *x ^ *y;
}



/*
 * C program to count total of zeros and ones in a binary number using bitwise operator
 */

#include <stdio.h>
#define INT_SIZE sizeof(int) * 8 /* Total number of bits in integer */

int main()
{
    int num, zeros, ones, i;

    /* Input number from user */
    printf("Enter any number: ");
    scanf("%d", &num);

    zeros = 0;
    ones = 0;

    for(i=0; i<INT_SIZE; i++)
    {
        /* If LSB is set then increment ones otherwise zeros */
        if(num & 1)
            ones++;
        else
            zeros++;

        /* Right shift bits of num to one position */
        num >>= 1;
    }

    printf("Total zero bit is %d\n", zeros);
    printf("Total one bit is %d", ones);

    return 0;
}



/*
 * C program to convert decimal to binary
 */
#include <stdio.h>
 
int main()
{
  int n, c, k;
 
  printf("Enter an integer in decimal number system\n");
  scanf("%d", &n);
 
  printf("%d in binary number system is:\n", n);
 
  for (c = 31; c >= 0; c--)
  {
    k = n >> c;
 
    if (k & 1)
      printf("1");
    else
      printf("0");
  }
 
  printf("\n");
 
  return 0;
}




/*
 * Program to convert Binary to Decimal using Left Shift operator 
 */
#include<stdio.h>
 
int main()
{
    int n,bnum,digit,dec=0,i=0;
   
    printf("\n Enter the binary number:");
    scanf("%d",&bnum);
     
    n=bnum;
     
    /*Loop to calculate decimal number for given the binary number*/
    while(n!=0)
    {
        digit=n%10;
        dec+=digit<<i;
        n=n/10;
        i++;
    }
     
    printf("\n The binary equivalent of %d in decimal = %d",bnum,dec);
    getch();
}